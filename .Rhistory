data_mat[4,] <- as.numeric(c(rnorm(10,0,0.135), rnorm(40,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(10,0,0.155), rnorm(40,1,0.280)))
length_orders <- as.numeric()
for(i in 1:5){
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 100,
B = 100, L = 1, gamma = 0.1, print_progress = FALSE)
length_orders[i] <- length(table(get_clust_VI(out_test$clust)))
}
data_mat <- matrix(NA, nrow = 5, ncol = 50)
data_mat[1,] <- as.numeric(c(rnorm(30,0,0.100), rnorm(20,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(30,0,0.125), rnorm(20,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(30,0,0.175), rnorm(20,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(10,0,0.135), rnorm(40,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(10,0,0.155), rnorm(40,1,0.280)))
length_orders <- as.numeric()
for(i in 1:5){
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 100,
B = 100, L = 1, gamma = 0.1, print_progress = FALSE)
length_orders[i] <- length(table(get_clust_VI(out_test$clust)))
}
data_mat <- matrix(NA, nrow = 5, ncol = 50)
data_mat[1,] <- as.numeric(c(rnorm(30,0,0.100), rnorm(20,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(30,0,0.125), rnorm(20,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(30,0,0.175), rnorm(20,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(10,0,0.135), rnorm(40,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(10,0,0.155), rnorm(40,1,0.280)))
length_orders <- as.numeric()
for(i in 1:5){
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 100,
B = 100, L = 1, gamma = 0.1, print_progress = FALSE)
length_orders[i] <- length(table(get_clust_VI(out_test$clust)))
}
data_mat <- matrix(NA, nrow = 5, ncol = 50)
data_mat[1,] <- as.numeric(c(rnorm(30,0,0.100), rnorm(20,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(30,0,0.125), rnorm(20,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(30,0,0.175), rnorm(20,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(10,0,0.135), rnorm(40,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(10,0,0.155), rnorm(40,1,0.280)))
length_orders <- as.numeric()
for(i in 1:5){
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 100,
B = 100, L = 1, gamma = 0.1, print_progress = FALSE)
length_orders[i] <- length(table(get_clust_VI(out_test$clust)))
}
data_mat <- matrix(NA, nrow = 5, ncol = 50)
data_mat[1,] <- as.numeric(c(rnorm(30,0,0.100), rnorm(20,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(30,0,0.125), rnorm(20,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(30,0,0.175), rnorm(20,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(10,0,0.135), rnorm(40,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(10,0,0.155), rnorm(40,1,0.280)))
length_orders <- as.numeric()
for(i in 1:5){
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 100,
B = 100, L = 1, gamma = 0.1, print_progress = FALSE)
length_orders[i] <- length(table(get_clust_VI(out_test$clust)))
}
data_mat <- matrix(NA, nrow = 5, ncol = 50)
data_mat[1,] <- as.numeric(c(rnorm(30,0,0.100), rnorm(20,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(30,0,0.125), rnorm(20,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(30,0,0.175), rnorm(20,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(10,0,0.135), rnorm(40,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(10,0,0.155), rnorm(40,1,0.280)))
length_orders <- as.numeric()
for(i in 1:5){
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 100,
B = 100, L = 1, gamma = 0.1, print_progress = FALSE)
length_orders[i] <- length(table(get_clust_VI(out_test$clust)))
}
data_mat <- matrix(NA, nrow = 5, ncol = 50)
data_mat[1,] <- as.numeric(c(rnorm(30,0,0.100), rnorm(20,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(30,0,0.125), rnorm(20,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(30,0,0.175), rnorm(20,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(10,0,0.135), rnorm(40,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(10,0,0.155), rnorm(40,1,0.280)))
length_orders <- as.numeric()
for(i in 1:5){
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 100,
B = 100, L = 1, gamma = 0.1, print_progress = FALSE)
length_orders[i] <- length(table(get_clust_VI(out_test$clust)))
}
data_mat <- matrix(NA, nrow = 5, ncol = 50)
data_mat[1,] <- as.numeric(c(rnorm(30,0,0.100), rnorm(20,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(30,0,0.125), rnorm(20,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(30,0,0.175), rnorm(20,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(10,0,0.135), rnorm(40,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(10,0,0.155), rnorm(40,1,0.280)))
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 100,
B = 100, L = 1, gamma = 0.1, print_progress = FALSE)
devtools::load_all(".")
data_mat <- matrix(NA, nrow = 5, ncol = 50)
data_mat[1,] <- as.numeric(c(rnorm(30,0,0.100), rnorm(20,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(30,0,0.125), rnorm(20,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(30,0,0.175), rnorm(20,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(10,0,0.135), rnorm(40,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(10,0,0.155), rnorm(40,1,0.280)))
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 100,
B = 100, L = 1, gamma = 0.1, print_progress = FALSE)
devtools::load_all(".")
data_mat <- matrix(NA, nrow = 5, ncol = 50)
data_mat[1,] <- as.numeric(c(rnorm(30,0,0.100), rnorm(20,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(30,0,0.125), rnorm(20,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(30,0,0.175), rnorm(20,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(10,0,0.135), rnorm(40,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(10,0,0.155), rnorm(40,1,0.280)))
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 100,
B = 100, L = 1, gamma = 0.1, print_progress = FALSE)
if(length(table(get_clust_VI(out_test$clust))) <= 5 & length(table(get_clust_VI(out_test$clust))) >= 1){
check = TRUE
} else {
check = FALSE
}
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 100,
B = 100, L = 1, gamma = 0.1, print_progress = FALSE)
devtools::load_all(".")
data_mat <- matrix(NA, nrow = 5, ncol = 50)
data_mat[1,] <- as.numeric(c(rnorm(30,0,0.100), rnorm(20,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(30,0,0.125), rnorm(20,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(30,0,0.175), rnorm(20,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(10,0,0.135), rnorm(40,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(10,0,0.155), rnorm(40,1,0.280)))
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 100,
B = 100, L = 1, gamma = 0.1, print_progress = FALSE)
if(length(table(get_clust_VI(out_test$clust))) <= 5 & length(table(get_clust_VI(out_test$clust))) >= 1){
check = TRUE
} else {
check = FALSE
}
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 5000,
B = 10000, L = 1, gamma = 0.1, print_progress = FALSE)
get_clust_VI(out_test$clust)
get_clust_VI(out_test$clust[2000:3000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 5000,
B = 10000, L = 1, gamma = 0.5, print_progress = T)
get_clust_VI(out_test$clust[2000:3000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 5000,
B = 10000, L = 1, gamma = 0.9, print_progress = T)
get_clust_VI(out_test$clust[2000:3000,])
get_clust_VI(out_test$clust[2000:5000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 5000,
B = 10000, L = 1, gamma = 0.9, print_progress = T, q = 0.2)
get_clust_VI(out_test$clust[2000:5000,])
data_array <- array(data = NA, dim = c(3,20,3))
data_array[1,,1] <- round(as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250))),3)
data_array[2,,1] <- round(as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250))),3)
data_array[3,,1] <- round(as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250))),3)
data_array[1,,2] <- round(as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250))),3)
data_array[2,,2] <- round(as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250))),3)
data_array[3,,2] <- round(as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250))),3)
data_array[1,,3] <- round(as.numeric(c(rnorm(5,0,0.155), rnorm(15,1,0.280))),3)
data_array[2,,3] <- round(as.numeric(c(rnorm(5,0,0.155), rnorm(15,1,0.280))),3)
data_array[3,,3] <- round(as.numeric(c(rnorm(5,0,0.155), rnorm(15,1,0.280))),3)
out_test <- clust_cp_multi(data = data_array, n_iterations = 100, B = 100, L = 1,
gamma = 0.1, k_0 = 0.25, nu_0 = 5, phi_0 = as.matrix(diag(0.1,3,3)), m_0 = rep(0,3), print_progress = FALSE)
if((length(table(get_clust_VI(out_test$clust))) <= 3) & (length(table(get_clust_VI(out_test$clust))) >= 1)){
check = TRUE
} else {
check = FALSE
}
out_test <- clust_cp_multi(data = data_array, n_iterations = 5000, B = 100000, L = 1,
gamma = 0.1, k_0 = 0.25, nu_0 = 5,
phi_0 = as.matrix(diag(0.1,3,3)), m_0 = rep(0,3), print_progress = FALSE)
get_clust_VI(out_test$clust[2000:5000,])
data_mat <- matrix(NA, nrow = 5, ncol = 100)
data_mat[1,] <- as.numeric(c(rnorm(30,0,0.100), rnorm(70,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(30,0,0.125), rnorm(70,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(30,0,0.175), rnorm(70,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(80,0,0.135), rnorm(20,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(80,0,0.155), rnorm(20,1,0.280)))
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 5000,
B = 10000, L = 1, gamma = 0.9, print_progress = T, q = 0.2)
get_clust_VI(out_test$clust[2000:5000,])
out_test$clust
get_clust_VI(out_test$clust[3000:5000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 10000,
B = 10000, L = 1, gamma = 0.9, print_progress = T, q = 0.2)
get_clust_VI(out_test$clust[3000:10000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 10000,
B = 10000, L = 1, gamma = 0.9, print_progress = T, q = 0.5)
get_clust_VI(out_test$clust[3000:10000,])
get_clust_VI(out_test$clust[5000:10000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 10000,
B = 10000, L = 1, gamma = 0.9, print_progress = T, q = 0.1)
get_clust_VI(out_test$clust[5000:10000,])
out_test$clust
table(out_test$clust[1,])
table(out_test$clust[,1])
table(out_test$clust[,2])
table(out_test$clust[,3])
table(out_test$orders[10000,])
table(out_test$orders[10000,,1])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 10000,
B = 10000, L = 1, gamma = 0.5, print_progress = T, q = 0.1)
get_clust_VI(out_test$clust[5000:10000,])
get_clust_VI(out_test$clust[3000:10000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 10000,
B = 10000, L = 1, gamma = 0.3, print_progress = T, q = 0.1)
get_clust_VI(out_test$clust[3000:10000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 10000,
B = 100000, L = 1, gamma = 0.3, print_progress = T, q = 0.1)
get_clust_VI(out_test$clust[3000:10000,])
devtools::load_all(".")
rhub::rhub_check()
data_array <- array(data = NA, dim = c(2,20,3))
data_array[1,,1] <- as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250)))
data_array[2,,1] <- as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250)))
data_array[1,,2] <- as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250)))
data_array[2,,2] <- as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250)))
data_array[1,,3] <- as.numeric(c(rnorm(5,0,0.155), rnorm(15,1,0.280)))
data_array[2,,3] <- as.numeric(c(rnorm(5,0,0.155), rnorm(15,1,0.280)))
out_test <- clust_cp_multi(data = data_array, n_iterations = 100, B = 100, L = 1,
gamma = 0.1, k_0 = 0.25, nu_0 = 5, phi_0 = as.matrix(diag(0.1,2,2)), m_0 = rep(0,2), print_progress = FALSE)
if((length(table(get_clust_VI(out_test$clust))) <= 3) & (length(table(get_clust_VI(out_test$clust))) >= 1)){
check = TRUE
} else {
check = FALSE
}
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
devtools::load_all(".")
rhub::rhub_check()
devtools::load_all(".")
rhub::rhub_check()
rhub::rhub_check()
devtools::load_all(".")
rhub::rhub_check()
rhub::rhub_check()
devtools::load_all(".")
rhub::rhub_check()
devtools::load_all(".")
rhub::rhub_check()
devtools::load_all(".")
rhub::rhub_check()
usethis::use_version("dev")
devtools::submit_cran()
devtools::check(cran = TRUE)
?usethis::use_version
?usethis::use_version("patch")
usethis::use_version("patch")
devtools::submit_cran()
devtools::submit_cran()
load("H:\\Il mio Drive\Dottorato\\Progetti\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\Real data EPI\\marginal_likelihood_EU_11022025_1_fix.RData")
load("H:\\Il mio Drive\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\Real data EPI\\marginal_likelihood_EU_11022025_1_fix.RData")
load("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\Real data EPI\\marginal_likelihood_EU_11022025_1_fix.RData")
plot(llik_vec, type = "l")
llik_vec
knitr::opts_chunk$set(echo = TRUE)
library(ggpubr)
library(ggplot2)
library(tidyverse)
library(eurostat)
library(leaflet)
library(sf)
library(scales)
library(cowplot)
library(ggthemes)
library(urbnmapr)
source("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\10_import_real_data.R")
library(ggpubr)
library(ggplot2)
library(tidyverse)
library(eurostat)
library(leaflet)
library(sf)
library(scales)
library(cowplot)
library(ggthemes)
library(urbnmapr)
source("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\10_import_real_data.R")
source("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\3_functions_epydem.R")
states_to_remove_EU <- which(eu_states %in% c("Iceland", "Norway", "Liechtenstein"))
eu_states <- eu_states[-states_to_remove_EU]
#Rcpp::sourceCpp(file = "main_code_fix.cpp")
load("Real data EPI/est_model_EU_11022025_1.RData")
MCMC_chain_run1 <- est_model$clust[2500:15000,]
PSM <- salso::psm(MCMC_chain_run1)
#head(PSM)
est_part <- mcclust.ext::minbinder.ext(psm = PSM, cls.draw = MCMC_chain_run1 + 1)$cl
table(est_part)
EU27 <- eu_countries %>%
filter(code != 'UK') %>%
dplyr::select(geo = code, name)
SHP_0 <- get_eurostat_geospatial(resolution = 10,
nuts_level = 0,
year = 2016)
SHP_27 <- SHP_0 %>%
dplyr::select(geo = NUTS_ID, geometry) %>%
inner_join(EU27, by = "geo") %>%
arrange(geo) %>%
st_as_sf()
EU_27 <- get_eurostat("tec00115", time_format = "num")
EU_27_shp <- EU_27 %>%
filter(unit == 'CLV_PCH_PRE') %>%
filter(TIME_PERIOD == 2020) %>%
dplyr::select(geo, values) %>%
inner_join(SHP_27, by = "geo") %>%
st_as_sf()
#EU_27_shp$values <- as.factor(sample(1:7, 27,TRUE))
df_partition <- as.data.frame(cbind(eu_states, as.numeric(est_part)))
colnames(df_partition) <- c("name", "Cluster")
df_partition$Cluster <- as.factor(df_partition$Cluster)
EU_27_shp <- EU_27_shp %>% left_join(df_partition, by = "name") %>%
ggplot(aes(fill = Cluster)) +
geom_sf(color = "#000000", alpha = 0.5) +
theme_bw() +
scale_x_continuous(limits = c(-10, 35)) +
scale_y_continuous(limits = c(35, 69)) +
scale_fill_brewer(palette="Dark2") +
theme(legend.position = "none")
plot(EU_27_shp)
seq <- c()
for(i in 1:max(est_part)){
seq <- c(seq, which(est_part == i))
}
PSM_seq <- PSM[seq,seq]
matrix_out <- reshape2::melt(PSM_seq[1:nrow(PSM_seq), , drop = FALSE])
plot_heat <- ggplot(matrix_out) +
geom_tile(aes(x = Var2, y = Var1, fill = value), na.rm = TRUE, size = 0.0,show.legend = FALSE) +
scale_fill_gradient(
low = "white",
high = "black"
) +
labs(x = "", y = "", fill = "") +
theme_linedraw() +
coord_cartesian(xlim = c(0, ncol(PSM_seq) + 1), ylim = c(0, ncol(PSM_seq) + 1), expand = FALSE) +
scale_x_continuous(breaks = seq(1, ncol(PSM_seq), by = 1),
labels = seq) +
scale_y_continuous(breaks = seq(1, ncol(PSM_seq), by = 1),
labels = seq) +
theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
axis.text.y = element_text(size = 8),
panel.grid.major = element_blank(),
panel.grid.minor = element_line(size=0.1))
plot(plot_heat)
eu_states[which(est_part == 1)]
eu_states[which(est_part == 2)]
eu_states[which(est_part == 3)]
eu_states[which(est_part == 4)]
eu_states[which(est_part == 5)]
load("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\Real data EPI\\marginal_likelihood_EU_11022025_1_fix_2.RData")
lkl <- llik_vec
df_likelihood_plot <- as.data.frame(cbind(1:length(lkl),lkl))
colnames(df_likelihood_plot) <- c("iteration","likelihood")
lkl_plot <- ggplot(data = df_likelihood_plot, aes(x = iteration, y = likelihood)) +
geom_line(colour = "black", lwd = 0.5) +
ylab("marginal log-likelihood") +
xlab("iteration") +
theme_bw()
lkl_plot
length(lkl)
load("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\Real data EPI\\marginal_likelihood_EU_11022025_1_fix_2.RData")
lkl <- llik_vec[1:15000]
df_likelihood_plot <- as.data.frame(cbind(1:length(lkl),lkl))
colnames(df_likelihood_plot) <- c("iteration","likelihood")
lkl_plot <- ggplot(data = df_likelihood_plot, aes(x = iteration, y = likelihood)) +
geom_line(colour = "black", lwd = 0.5) +
ylab("marginal log-likelihood") +
xlab("iteration") +
theme_bw()
lkl_plot
source("10_import_real_data.R")
states_to_remove_EU <- which(eu_states %in% c("Iceland", "Norway", "Liechtenstein"))
eu_states <- eu_states[-states_to_remove_EU]
TotPop_EU <- TotPop_EU[-states_to_remove_EU]
infection_times_COVID_EU <- lapply(infection_times_COVID_EU,
function(x)
x[which(EU_dates == "2021-06-01"):which(EU_dates == "2022-09-30")])
infection_times_COVID_EU <- infection_times_COVID_EU[-states_to_remove_EU]
dataEU <- matrix(0, nrow = length(infection_times_COVID_EU), ncol = length(infection_times_COVID_EU[[1]]))
for(i in 1:length(infection_times_COVID_EU)){
dataEU[i,] <- infection_times_COVID_EU[[i]]
}
dataEU_rolling <- matrix(0, nrow = length(infection_times_COVID_EU), ncol = length(infection_times_COVID_EU[[1]]))
for(i in 1:nrow(dataEU_rolling)){
dataEU[i, which(is.na(dataEU[i,]))] = 0
pool <- rep(1:length(dataEU_rolling[i,]), dataEU[i,])
pool_sampled <- sample(pool, 50000, replace = FALSE)
dataEU_rolling[i,as.numeric(names(table(pool_sampled)))] = table(pool_sampled)
dataEU_rolling[i,] <- round(zoo::rollmean(dataEU_rolling[i,], 7, fill = TRUE))
}
load("Real data EPI/cluster_marginal_CP_EU_11022025_1.RData")
marginalCP_run <- save_finalpartitions
dates_run1 <- EU_dates[which(EU_dates == "2021-06-01"):which(EU_dates == "2022-09-30")]
cp1 <- cumsum(table(marginalCP_run[[1]]))
cp2 <- cumsum(table(marginalCP_run[[2]]))
cp3 <- cumsum(table(marginalCP_run[[3]]))
cp4 <- cumsum(table(marginalCP_run[[4]]))
cp5 <- cumsum(table(marginalCP_run[[5]]))
cp1 <- cp1[-length(cp1)]
cp2 <- cp2[-length(cp2)]
cp3 <- cp3[-length(cp3)]
cp4 <- cp4[-length(cp4)]
cp5 <- cp5[-length(cp5)]
dates_run1[cp1]
dates_run1[cp2]
dates_run1[cp3]
dates_run1[cp4]
dates_run1[cp5]
df_sf_plot <- data.frame(y = as.vector(sapply(1:27, function(x) 1 - cumsum(dataEU_rolling[x,]) / sum(dataEU_rolling[x,]))),
x = rep(1:487, 27),
obs = as.factor(rep(1:27, each = 487)),
Cluster = as.factor(rep(est_part, each = 487)))
#df_sf_plot <- df_sf_plot %>% filter(Cluster == 3)
df_plot <- ggplot(df_sf_plot, aes(x = x, y = y, group = obs, colour = Cluster)) +
geom_line(lwd = 0.5) +
geom_vline(xintercept = cp1, col = RColorBrewer::brewer.pal(7,"Dark2")[1], lty = "dashed", lwd = 0.25) +
geom_vline(xintercept = cp2, col = RColorBrewer::brewer.pal(7,"Dark2")[2], lty = "dashed", lwd = 0.25) +
geom_vline(xintercept = cp3, col = RColorBrewer::brewer.pal(7,"Dark2")[3], lty = "dashed", lwd = 0.25) +
xlab("") +
ylab("Proportion of Infected Individuals") +
theme_bw() +
scale_x_continuous(breaks = c(20, 200,376,458), label = c("Jun 2021", "Dec 2022", "Jun 2022" ,"Sept 2022"))
plot(df_plot)
load("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\
Backup project\\Model-Based-Clustering-of-Time-Series\\Real data EPI\\
marginal_likelihood_EU_11022025_1_fix_2.RData")
load("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\Real data EPI\\marginal_likelihood_EU_11022025_1_fix_2.RData")
lkl <- llik_vec[1:15000]
df_likelihood_plot <- as.data.frame(cbind(1:length(lkl),lkl))
colnames(df_likelihood_plot) <- c("iteration","likelihood")
lkl_plot <- ggplot(data = df_likelihood_plot, aes(x = iteration, y = likelihood)) +
geom_line(colour = "black", lwd = 0.5) +
ylab("marginal log-likelihood") +
xlab("iteration") +
theme_bw()
lkl_plot
devtools::load_all(".")
?usethis::use_version
usethis::use_version("patch")
urlchecker::url_check()
devtools::build_readme()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
devtools::submit_cran()
library("roxygen")
install.packages(c("tidyr","ggpubr"))
detect_cp_uni
source("G:/Il mio Drive/Dottorato/Progetti/BayesChange/R/detect_cp.R")
?detect_cp_uni
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp_uni(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- BayesChange::detect_cp_uni(data = data_vec,
n_iterations = 2500,
q = 0.25,
phi = 0.1, a = 1, b = 1, c = 0.1)
get_clust_VI(out$order)
devtools::load_all(".")
devtools::load_all(".")
?detect_cp_uni
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp_uni(data = data_vec,
n_iterations = 2500,
q = 0.25)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp_uni(data = data_vec,
n_iterations = 2500,
q = 0.25, a = 1, b = 1, c = 0.1)
devtools::load_all(".")
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp_uni(data = data_vec,
n_iterations = 2500,
q = 0.25, a = 1, b = 1, c = 0.1)
?lm
devtools::load_all(".")
?detect_cp
?sim_epi_data
?sim_epi_data
devtools::load_all(".")
?sim_epi_data
betas <- list(c(rep(0.45, 25),rep(0.14,25)))
inf_times <- as.numeric()
inf_times <- sim_epi_data(10000, 10, 50, betas[[i]], 1/8)
betas <- c(rep(0.45, 25),rep(0.14,25))
inf_times <- as.numeric()
inf_times <- sim_epi_data(10000, 10, 50, betas, 1/8)
inf_times
