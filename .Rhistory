data_mat[2,] <- as.numeric(c(rnorm(30,0,0.125), rnorm(20,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(30,0,0.175), rnorm(20,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(10,0,0.135), rnorm(40,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(10,0,0.155), rnorm(40,1,0.280)))
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 100,
B = 100, L = 1, gamma = 0.1, print_progress = FALSE)
if(length(table(get_clust_VI(out_test$clust))) <= 5 & length(table(get_clust_VI(out_test$clust))) >= 1){
check = TRUE
} else {
check = FALSE
}
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 100,
B = 100, L = 1, gamma = 0.1, print_progress = FALSE)
devtools::load_all(".")
data_mat <- matrix(NA, nrow = 5, ncol = 50)
data_mat[1,] <- as.numeric(c(rnorm(30,0,0.100), rnorm(20,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(30,0,0.125), rnorm(20,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(30,0,0.175), rnorm(20,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(10,0,0.135), rnorm(40,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(10,0,0.155), rnorm(40,1,0.280)))
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 100,
B = 100, L = 1, gamma = 0.1, print_progress = FALSE)
if(length(table(get_clust_VI(out_test$clust))) <= 5 & length(table(get_clust_VI(out_test$clust))) >= 1){
check = TRUE
} else {
check = FALSE
}
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 5000,
B = 10000, L = 1, gamma = 0.1, print_progress = FALSE)
get_clust_VI(out_test$clust)
get_clust_VI(out_test$clust[2000:3000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 5000,
B = 10000, L = 1, gamma = 0.5, print_progress = T)
get_clust_VI(out_test$clust[2000:3000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 5000,
B = 10000, L = 1, gamma = 0.9, print_progress = T)
get_clust_VI(out_test$clust[2000:3000,])
get_clust_VI(out_test$clust[2000:5000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 5000,
B = 10000, L = 1, gamma = 0.9, print_progress = T, q = 0.2)
get_clust_VI(out_test$clust[2000:5000,])
data_array <- array(data = NA, dim = c(3,20,3))
data_array[1,,1] <- round(as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250))),3)
data_array[2,,1] <- round(as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250))),3)
data_array[3,,1] <- round(as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250))),3)
data_array[1,,2] <- round(as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250))),3)
data_array[2,,2] <- round(as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250))),3)
data_array[3,,2] <- round(as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250))),3)
data_array[1,,3] <- round(as.numeric(c(rnorm(5,0,0.155), rnorm(15,1,0.280))),3)
data_array[2,,3] <- round(as.numeric(c(rnorm(5,0,0.155), rnorm(15,1,0.280))),3)
data_array[3,,3] <- round(as.numeric(c(rnorm(5,0,0.155), rnorm(15,1,0.280))),3)
out_test <- clust_cp_multi(data = data_array, n_iterations = 100, B = 100, L = 1,
gamma = 0.1, k_0 = 0.25, nu_0 = 5, phi_0 = as.matrix(diag(0.1,3,3)), m_0 = rep(0,3), print_progress = FALSE)
if((length(table(get_clust_VI(out_test$clust))) <= 3) & (length(table(get_clust_VI(out_test$clust))) >= 1)){
check = TRUE
} else {
check = FALSE
}
out_test <- clust_cp_multi(data = data_array, n_iterations = 5000, B = 100000, L = 1,
gamma = 0.1, k_0 = 0.25, nu_0 = 5,
phi_0 = as.matrix(diag(0.1,3,3)), m_0 = rep(0,3), print_progress = FALSE)
get_clust_VI(out_test$clust[2000:5000,])
data_mat <- matrix(NA, nrow = 5, ncol = 100)
data_mat[1,] <- as.numeric(c(rnorm(30,0,0.100), rnorm(70,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(30,0,0.125), rnorm(70,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(30,0,0.175), rnorm(70,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(80,0,0.135), rnorm(20,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(80,0,0.155), rnorm(20,1,0.280)))
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 5000,
B = 10000, L = 1, gamma = 0.9, print_progress = T, q = 0.2)
get_clust_VI(out_test$clust[2000:5000,])
out_test$clust
get_clust_VI(out_test$clust[3000:5000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 10000,
B = 10000, L = 1, gamma = 0.9, print_progress = T, q = 0.2)
get_clust_VI(out_test$clust[3000:10000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 10000,
B = 10000, L = 1, gamma = 0.9, print_progress = T, q = 0.5)
get_clust_VI(out_test$clust[3000:10000,])
get_clust_VI(out_test$clust[5000:10000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 10000,
B = 10000, L = 1, gamma = 0.9, print_progress = T, q = 0.1)
get_clust_VI(out_test$clust[5000:10000,])
out_test$clust
table(out_test$clust[1,])
table(out_test$clust[,1])
table(out_test$clust[,2])
table(out_test$clust[,3])
table(out_test$orders[10000,])
table(out_test$orders[10000,,1])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 10000,
B = 10000, L = 1, gamma = 0.5, print_progress = T, q = 0.1)
get_clust_VI(out_test$clust[5000:10000,])
get_clust_VI(out_test$clust[3000:10000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 10000,
B = 10000, L = 1, gamma = 0.3, print_progress = T, q = 0.1)
get_clust_VI(out_test$clust[3000:10000,])
out_test <- clust_cp_uni(data = data_mat,
n_iterations = 10000,
B = 100000, L = 1, gamma = 0.3, print_progress = T, q = 0.1)
get_clust_VI(out_test$clust[3000:10000,])
devtools::load_all(".")
rhub::rhub_check()
data_array <- array(data = NA, dim = c(2,20,3))
data_array[1,,1] <- as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250)))
data_array[2,,1] <- as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250)))
data_array[1,,2] <- as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250)))
data_array[2,,2] <- as.numeric(c(rnorm(10,0,0.100), rnorm(10,1,0.250)))
data_array[1,,3] <- as.numeric(c(rnorm(5,0,0.155), rnorm(15,1,0.280)))
data_array[2,,3] <- as.numeric(c(rnorm(5,0,0.155), rnorm(15,1,0.280)))
out_test <- clust_cp_multi(data = data_array, n_iterations = 100, B = 100, L = 1,
gamma = 0.1, k_0 = 0.25, nu_0 = 5, phi_0 = as.matrix(diag(0.1,2,2)), m_0 = rep(0,2), print_progress = FALSE)
if((length(table(get_clust_VI(out_test$clust))) <= 3) & (length(table(get_clust_VI(out_test$clust))) >= 1)){
check = TRUE
} else {
check = FALSE
}
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
devtools::load_all(".")
rhub::rhub_check()
devtools::load_all(".")
rhub::rhub_check()
rhub::rhub_check()
devtools::load_all(".")
rhub::rhub_check()
rhub::rhub_check()
devtools::load_all(".")
rhub::rhub_check()
devtools::load_all(".")
rhub::rhub_check()
devtools::load_all(".")
rhub::rhub_check()
usethis::use_version("dev")
devtools::submit_cran()
devtools::check(cran = TRUE)
?usethis::use_version
?usethis::use_version("patch")
usethis::use_version("patch")
devtools::submit_cran()
devtools::submit_cran()
Rcpp::sourceCpp(file = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\main_code_fix.cpp")
llik_vec <- as.numeric()
knitr::opts_chunk$set(echo = TRUE)
load("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\Real data EPI\\marginal_likelihood_EU_11022025_1.RData")
llik_vec
which(is.na(llik_vec))
min(which(is.na(llik_vec)))
i = 1659
sum(sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )))
library(ggpubr)
library(ggplot2)
library(tidyverse)
library(eurostat)
library(leaflet)
library(sf)
library(scales)
library(cowplot)
library(ggthemes)
library(urbnmapr)
source("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\10_import_real_data.R")
source("10_import_real_data.R")
library(ggpubr)
library(ggplot2)
library(tidyverse)
library(eurostat)
library(leaflet)
library(sf)
library(scales)
library(cowplot)
library(ggthemes)
library(urbnmapr)
source("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\10_import_real_data.R")
source("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\3_functions_epydem.R")
states_to_remove_EU <- which(eu_states %in% c("Iceland", "Norway", "Liechtenstein"))
eu_states <- eu_states[-states_to_remove_EU]
#Rcpp::sourceCpp(file = "main_code_fix.cpp")
source("10_import_real_data.R")
states_to_remove_EU <- which(eu_states %in% c("Iceland", "Norway", "Liechtenstein"))
eu_states <- eu_states[-states_to_remove_EU]
TotPop_EU <- TotPop_EU[-states_to_remove_EU]
infection_times_COVID_EU <- lapply(infection_times_COVID_EU,
function(x)
x[which(EU_dates == "2021-06-01"):which(EU_dates == "2022-09-30")])
infection_times_COVID_EU <- infection_times_COVID_EU[-states_to_remove_EU]
dataEU <- matrix(0, nrow = length(infection_times_COVID_EU), ncol = length(infection_times_COVID_EU[[1]]))
for(i in 1:length(infection_times_COVID_EU)){
dataEU[i,] <- infection_times_COVID_EU[[i]]
}
dataEU_rolling <- matrix(0, nrow = length(infection_times_COVID_EU), ncol = length(infection_times_COVID_EU[[1]]))
for(i in 1:nrow(dataEU_rolling)){
dataEU[i, which(is.na(dataEU[i,]))] = 0
pool <- rep(1:length(dataEU_rolling[i,]), dataEU[i,])
pool_sampled <- sample(pool, 50000, replace = FALSE)
dataEU_rolling[i,as.numeric(names(table(pool_sampled)))] = table(pool_sampled)
dataEU_rolling[i,] <- round(zoo::rollmean(dataEU_rolling[i,], 7, fill = TRUE))
}
sum(sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )))
load("Real data EPI/est_model_EU_11022025_1.RData")
MCMC_chain_run1 <- est_model$clust[2500:15000,]
sum(sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )))
I
I
i
llik_vec
which(is.na(llik_vec))
min(which(is.na(llik_vec)))
i = 1659
sum(sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )))
llik_vec[1659]
llik_vec[i] <- sum(sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )))
llik_vec[i]
length(which(is.na(llik_vec)))
which(is.na(llik_vec))
which(is.na(llik_vec)) == 4891
which(is.na(llik_vec))
which(is.na(llik_vec))[1000]
which(is.na(llik_vec))[2000]
est_model$llik
summary(est_model$llik)
max(which(is.na(llik_vec)))
library(ggpubr)
library(ggplot2)
library(tidyverse)
library(eurostat)
library(leaflet)
library(sf)
library(scales)
library(cowplot)
library(ggthemes)
library(urbnmapr)
source("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\10_import_real_data.R")
load("H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\Real data EPI\\marginal_likelihood_EU_11022025_1.RData")
lkl <- llik_vec
df_likelihood_plot <- as.data.frame(cbind(1:length(lkl),lkl))
colnames(df_likelihood_plot) <- c("iteration","likelihood")
lkl_plot <- ggplot(data = df_likelihood_plot, aes(x = iteration, y = likelihood)) +
geom_line(colour = "black", lwd = 0.5) +
ylab("marginal log-likelihood") +
xlab("iteration") +
theme_bw()
lkl_plot
na_values <- which(is.na(llik_vec))
na_values
Rcpp::sourceCpp(file = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\main_code_fix.cpp")
#llik_vec <- as.numeric()
na_values <- which(is.na(llik_vec))
for(i in na_values){
llik_vec[i] <- sum(sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )))
print(i)
}
llik_vec[20000]
sum(sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )))
sum(sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )))
sum(sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )))
sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 ))
sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 ))
sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 ))
sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 ))
sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 ))
sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 ))
sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 ))
x=2
dataEU_rolling[x,]
est_model$orders[est_model$clust[i,x]+1,,i]
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 ))
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
plot(llik_vec, type = "l")
est_model$clust[i,x]+1
est_model$clust[i,]
x
dataEU_rolling[x,]
sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i],
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 ))
est_model$orders[est_model$clust[i,x]+1,,i]
est_model$orders[est_model$clust[i,x]+1,,i]+1
Rcpp::sourceCpp(file = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\main_code_fix.cpp")
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i]+1,
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
Rcpp::sourceCpp(file = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\main_code_fix.cpp")
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i]+1,
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
Rcpp::sourceCpp(file = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\main_code_fix.cpp")
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i]+1,
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
Rcpp::sourceCpp(file = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\main_code_fix.cpp")
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i]+1,
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
dataEU_rolling[x,]
which(dataEU_rolling[x,] == 0)
Rcpp::sourceCpp(file = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\main_code_fix.cpp")
Rcpp::sourceCpp(file = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\main_code_fix.cpp")
Rcpp::sourceCpp(file = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\main_code_fix.cpp")
Rcpp::sourceCpp(file = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\main_code_fix.cpp")
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i]+1,
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
Rcpp::sourceCpp(file = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\main_code_fix.cpp")
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i]+1,
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i]+1,
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i]+1,
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i]+1,
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i]+1,
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i]+1,
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )
which(is.na(llik_vec))
which(is.na(llik_vec) & llik_vec <= 15000)
na_values <- which(is.na(llik_vec))
na_values
na_values <- which(is.na(llik_vec))
na_values <- na_values[which(na_values <= 15000)]
na_values
Rcpp::sourceCpp(file = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\main_code_fix.cpp")
na_values <- which(is.na(llik_vec))
na_values <- na_values[which(na_values <= 15000)]
na_values
for(i in na_values){
llik_vec[i] <- sum(sapply(1:27, function(x) compute_likelihood_epi(data = t(as.matrix(dataEU_rolling[x,])),
new_order = est_model$orders[est_model$clust[i,x]+1,,i]+1,
dt = 0.1, a0 = 2, b0 = 10, gamma = 1/6,
rho = est_model$rho[i,x], M = 1000 )))
print(i)
}
plot(llik_vec, type = "l")
save(llik_vec, file = "marginal_likelihood_EU_11022025_1_fix_2")
save(llik_vec, file = "\\marginal_likelihood_EU_11022025_1_fix_2")
save(llik_vec, file = "marginal_likelihood_EU_11022025_1_fix_2.RData")
?save
save(llik_vec, file = "H:\\Il mio Drive\\Dottorato\\Progetti\\Model Based Clustering of TS\\Backup project\\Model-Based-Clustering-of-Time-Series\\marginal_likelihood_EU_11022025_1_fix_2.RData")
llik_vec
