.data_plot <- as.data.frame(cbind(vec_data, sort(rep(1:nrow(x$data),ncol(x$data)))))
.data_plot$V2 <- factor(.data_plot$V2, labels = unique(paste0("obs ", .data_plot$V2)) )
.data_plot$time <- rep(1:ncol(x$data),nrow(x$data))
p1 <- ggplot2::ggplot(.data_plot) +
ggplot2::geom_line(ggplot2::aes(x = time, y = vec_data, color = V2),  linetype = 1) +
ggplot2::geom_vline(xintercept = unique(.data_plot$time)[cp], linetype = 2) +
ggplot2::labs(x = "Time",
y = "Value",
color = NULL) +
ggplot2::scale_colour_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position="top", legend.key.width = ggplot2::unit(1, 'cm'))
p1
}
}
if(x$kernel_epi){
est_cp = posterior_estimate(x, loss = loss, maxNClusters = maxNClusters,
nRuns = nRuns, maxZealousAttempts = maxZealousAttempts)
.df_sf_plot <- data.frame(y = as.vector(sapply(1:nrow(x$data), function(y) 1 - cumsum(x$data[y,]) / sum(x$data[y,]))),
x = rep(1:ncol(x$data), nrow(x$data)),
time = rep(1:ncol(x$data),nrow(x$data)),
obs = rep("1", nrow(x$data)))
cp <- cumsum(table(est_cp))[-length(table(est_cp))]
p1 <- ggplot2::ggplot(.df_sf_plot, ggplot2::aes(x = x, y = y, color = obs)) +
ggplot2::geom_line(lwd = 0.5) +
ggplot2::geom_vline(xintercept = unique(.df_sf_plot$time)[cp], linetype = 2) +
ggplot2::labs(x = "Time",
y = "Proportion of Infected Individuals",
color = NULL) +
ggplot2::scale_colour_brewer(palette = "Set1") +
ggplot2::theme_minimal()
p1 + ggplot2::theme(legend.position="none")
}
} else {
if(x$kernel_ts){
if(x$univariate_ts){
est_cp = posterior_estimate(x, loss = loss, maxNClusters = maxNClusters,
nRuns = nRuns, maxZealousAttempts = maxZealousAttempts)
cp <- cumsum(table(est_cp))[-length(table(est_cp))]
vec_data <- x$data
.data_plot <- as.data.frame(cbind(vec_data))
.data_plot$time <- rep(1:length(x$data))
.data_plot$obs <- as.factor(rep(1, ncol(.data_plot)))
p1 <- ggplot2::ggplot(.data_plot) +
ggplot2::geom_line(ggplot2::aes(x = time, y = vec_data, color = obs),  linetype = 1) +
ggplot2::geom_vline(xintercept = unique(.data_plot$time)[cp], linetype = 2) +
ggplot2::labs(x = " ",
y = "Value",
color = NULL) +
ggplot2::scale_colour_brewer(palette = "Set1") +
ggplot2::theme_minimal()
p1 <- p1 + ggplot2::theme(legend.position="none")
x_unique <- unique(.data_plot$time)
b <- rep(0, length(x$data))
for(i in 1:x$n_iterations){
cp_iteration <- cumsum(table(x$orders[i,]))[-length(table(x$orders[i,]))]
b[cp_iteration] = b[cp_iteration] + 1
}
b <- b/(x$n_iterations)
p2 <- ggplot2::ggplot(data.frame(x = x_unique, y =b)) +
ggplot2::geom_bar(ggplot2::aes(x = x_unique, y = y), stat="identity", width = 0.5, col = "black") +
ggplot2::theme_linedraw() +
ggplot2::theme(axis.title.x = ggplot2::element_blank(), axis.text.y = ggplot2::element_text(angle = 90)) +
ggplot2::scale_y_continuous(breaks = c(0,.5,1)) +
ggplot2::ylab("Prob.") +
ggplot2::xlab("Time") +
ggplot2::scale_colour_brewer(palette = "Set1") +
ggplot2::theme_minimal()
p2 <- p2 + ggplot2::theme(legend.position="none")
ggpubr::ggarrange(p1, p2, nrow = 2, heights = c(2,1), common.legend = FALSE)
} else {
est_cp = posterior_estimate(x, loss = loss, maxNClusters = maxNClusters,
nRuns = nRuns, maxZealousAttempts = maxZealousAttempts)
cp <- cumsum(table(est_cp))[-length(table(est_cp))]
vec_data <- as.numeric()
for(i in 1:nrow(x$data)){
vec_data <- c(vec_data,x$data[i,])
}
.data_plot <- as.data.frame(cbind(vec_data, sort(rep(1:nrow(x$data),ncol(x$data)))))
.data_plot$V2 <- factor(.data_plot$V2, labels = unique(paste0("obs ", .data_plot$V2)) )
.data_plot$time <- rep(1:ncol(x$data),nrow(x$data))
p1 <- ggplot2::ggplot(.data_plot) +
ggplot2::geom_line(ggplot2::aes(x = time, y = vec_data, color = V2),  linetype = 1) +
ggplot2::geom_vline(xintercept = unique(.data_plot$time)[cp], linetype = 2) +
ggplot2::labs(x = " ",
y = "Value",
color = NULL) +
ggplot2::scale_colour_brewer(palette = "Set1") +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position="top", legend.key.width = ggplot2::unit(1, 'cm'))
x_unique <- unique(.data_plot$time)
b <- rep(0, ncol(x$data))
for(i in 1:x$n_iterations){
cp_iteration <- cumsum(table(x$orders[i,]))[-length(table(x$orders[i,]))]
b[cp_iteration] = b[cp_iteration] + 1
}
b <- b/(x$n_iterations)
p2 <- ggplot2::ggplot(data.frame(x = x_unique, y =b)) +
ggplot2::geom_bar(ggplot2::aes(x = x_unique, y = y), stat="identity", width = 0.5, col = "black") +
ggplot2::theme_linedraw() +
ggplot2::theme(axis.title.x = ggplot2::element_blank(), axis.text.y = ggplot2::element_text(angle = 90)) +
ggplot2::scale_y_continuous(breaks = c(0,.5,1)) +
ggplot2::ylab("Prob.") +
ggplot2::xlab("Time") +
ggplot2::theme_minimal()
ggpubr::ggarrange(p1, p2, nrow = 2, heights = c(2,1), common.legend = TRUE)
}
}
if(x$kernel_epi){
est_cp = posterior_estimate(x, loss = loss, maxNClusters = maxNClusters,
nRuns = nRuns, maxZealousAttempts = maxZealousAttempts)
.df_sf_plot <- data.frame(y = as.vector(sapply(1:nrow(x$data), function(y) 1 - cumsum(x$data[y,]) / sum(x$data[y,]))),
x = rep(1:ncol(x$data), nrow(x$data)),
time = rep(1:ncol(x$data),nrow(x$data)),
obs = rep("1", nrow(x$data)))
cp <- cumsum(table(est_cp))[-length(table(est_cp))]
p1 <- ggplot2::ggplot(.df_sf_plot, ggplot2::aes(x = x, y = y, color = obs)) +
ggplot2::geom_line(lwd = 0.5) +
ggplot2::geom_vline(xintercept = unique(.df_sf_plot$time)[cp], linetype = 2) +
ggplot2::labs(x = "Time",
y = "Proportion of Infected Individuals",
color = NULL) +
ggplot2::scale_colour_brewer(palette = "Set1") +
ggplot2::theme_minimal()
p1 <- p1 + ggplot2::theme(legend.position="none")
x_unique <- unique(.df_sf_plot$time)
b <- rep(0, length(x$data))
for(i in 1:x$n_iterations){
cp_iteration <- cumsum(table(x$orders[i,]))[-length(table(x$orders[i,]))]
b[cp_iteration] = b[cp_iteration] + 1
}
b <- b/(x$n_iterations)
p2 <- ggplot2::ggplot(data.frame(x = x_unique, y =b)) +
ggplot2::geom_bar(ggplot2::aes(x = x_unique, y = y), stat="identity", width = 0.5, col = "black") +
ggplot2::theme_linedraw() +
ggplot2::theme(axis.title.x = ggplot2::element_blank(), axis.text.y = ggplot2::element_text(angle = 90)) +
ggplot2::scale_y_continuous(breaks = c(0,.5,1)) +
ggplot2::ylab("Prob.") +
ggplot2::xlab("Time") +
ggplot2::scale_colour_brewer(palette = "Set1") +
ggplot2::theme_minimal()
p2 <- p2 + ggplot2::theme(legend.position="none")
ggpubr::ggarrange(p1, p2, nrow = 2, heights = c(2,1), common.legend = FALSE)
}
}
!plot_freq
time <- V2 <- y <- NULL
!plot_freq
x$kernel_ts
x$univariate_ts
est_cp = posterior_estimate(x, loss = loss, maxNClusters = maxNClusters,
nRuns = nRuns, maxZealousAttempts = maxZealousAttempts)
cp <- cumsum(table(est_cp))[-length(table(est_cp))]
vec_data <- x$data
.data_plot <- as.data.frame(cbind(vec_data))
.data_plot$time <- rep(1:length(x$data))
.data_plot$obs <- as.factor(rep(1, ncol(.data_plot)))
p1 <- ggplot2::ggplot(.data_plot) +
ggplot2::geom_line(ggplot2::aes(x = time, y = vec_data, color = obs),  linetype = 1) +
ggplot2::geom_vline(xintercept = unique(.data_plot$time)[cp], linetype = 2) +
ggplot2::labs(x = "Time",
y = "Value",
color = NULL) +
ggplot2::scale_colour_brewer(palette = "Set1") +
ggplot2::theme_minimal()
p1 + ggplot2::theme(legend.position="none")
x$univariate_ts
est_cp = posterior_estimate(x, loss = loss, maxNClusters = maxNClusters,
nRuns = nRuns, maxZealousAttempts = maxZealousAttempts)
cp <- cumsum(table(est_cp))[-length(table(est_cp))]
vec_data <- as.numeric()
for(i in 1:nrow(x$data)){
vec_data <- c(vec_data,x$data[i,])
}
.data_plot <- as.data.frame(cbind(vec_data, sort(rep(1:nrow(x$data),ncol(x$data)))))
x$kernel_epi
devtools::load_all(".")
devtools::load_all(".")
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp(data = data_vec, n_iterations = 2500, n_burnin = 500,
params = list(a = 1, b = 1, c = 0.1), kernel = "ts")
print(out)
plot(out, plot_freq = FALSE)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp(data = data_vec, n_iterations = 2500, n_burnin = 500,
params = list(a = 1, b = 1, c = 0.1), kernel = "ts")
print(out)
plot(out, plot_freq = FALSE)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp(data = data_vec, n_iterations = 2500, n_burnin = 500,
params = list(a = 1, b = 1, c = 0.1), kernel = "ts")
print(out)
plot(out)
plot.DetectCpObj(out)
out
out$data
out$kernel_ts
out$kernel_epi
out$univariate_ts
devtools::load_all(".")
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp(data = data_vec, n_iterations = 2500, n_burnin = 500,
params = list(a = 1, b = 1, c = 0.1), kernel = "ts")
print(out)
plot(out)
devtools::load_all(".")
out <- clust_cp(data = data_mat, n_iterations = 1000, n_burnin = 100,
kernel = "ts",
params = list(L = 1, gamma = 0.5), B = 10)
library(BayesChange)
data_mat <- matrix(NA, nrow = 5, ncol = 100)
data_mat[1,] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(50,0,0.125), rnorm(50,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
out <- clust_cp(data = data_mat, n_iterations = 1000, n_burnin = 100,
kernel = "ts",
params = list(L = 1, gamma = 0.5), B = 10)
devtools::load_all(".")
out <- clust_cp(data = data_mat, n_iterations = 1000, n_burnin = 100,
kernel = "ts",
params = list(L = 1, gamma = 0.5), B = 10)
devtools::load_all(".")
out <- clust_cp(data = data_mat, n_iterations = 1000, n_burnin = 100,
kernel = "ts",
params = list(L = 1, gamma = 0.5), B = 10)
out <- clust_cp(data = data_mat, n_iterations = 1000, n_burnin = 100,
kernel = "ts",
params = list(phi = 0.1, L = 1, gamma = 0.5), B = 10)
devtools::load_all(".")
devtools::load_all(".")
data_mat <- matrix(NA, nrow = 5, ncol = 100)
data_mat[1,] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(50,0,0.125), rnorm(50,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
out <- clust_cp(data = data_mat, n_iterations = 1000, n_burnin = 100,
kernel = "ts",
params = list(B = 1000, L = 1, gamma = 0.5))
posterior_estimate(out, loss = "binder")
plot(out, loss = "binder")
data_array <- array(data = NA, dim = c(3,100,5))
data_array[1,,1] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[2,,1] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[3,,1] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[1,,2] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[2,,2] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[3,,2] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[1,,3] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_array[2,,3] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_array[3,,3] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_array[1,,4] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
data_array[2,,4] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
data_array[3,,4] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
data_array[1,,5] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
data_array[2,,5] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
data_array[3,,5] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
out <- clust_cp(data = data_array, n_iterations = 1000, n_burnin = 100,
kernel = "ts",
list(B = 1000, L = 1, gamma = 0.1, k_0 = 0.25, nu_0 = 5,
phi_0 = diag(0.1,3,3), m_0 = rep(0,3)))
out <- clust_cp(data = data_array, n_iterations = 1000, n_burnin = 100,
kernel = "ts",
list(gamma = 0.1, k_0 = 0.25, nu_0 = 5,  phi_0 = diag(0.1,3,3), m_0 = rep(0,3)))
?clust_cp
out <- clust_cp(data = data_array, n_iterations = 1000, n_burnin = 100,
kernel = "ts", params = list(gamma = 0.1, k_0 = 0.25, nu_0 = 5,  phi_0 = diag(0.1,3,3), m_0 = rep(0,3)))
devtools::load_all(".")
out <- clust_cp(data = data_array, n_iterations = 1000, n_burnin = 100,
kernel = "ts", params = list(gamma = 0.1, k_0 = 0.25, nu_0 = 5,  phi_0 = diag(0.1,3,3), m_0 = rep(0,3)))
posterior_estimate(out, loss = "binder")
plot(out, loss = "binder")
data_mat <- matrix(NA, nrow = 5, ncol = 50)
betas <- list(c(rep(0.45, 25),rep(0.14,25)),
c(rep(0.55, 25),rep(0.11,25)),
c(rep(0.50, 25),rep(0.12,25)),
c(rep(0.52, 10),rep(0.15,40)),
c(rep(0.53, 10),rep(0.13,40)))
inf_times <- list()
for(i in 1:5){
inf_times[[i]] <- sim_epi_data(S0 = 10000, I0 = 10, max_time = 50, beta_vec = betas[[i]], gamma_0 = 1/8)
vec <- rep(0,50)
names(vec) <- as.character(1:50)
for(j in 1:50){
if(as.character(j) %in% names(table(floor(inf_times[[i]])))){
vec[j] = table(floor(inf_times[[i]]))[which(names(table(floor(inf_times[[i]]))) == j)]
}
}
data_mat[i,] <- vec
}
?sim_epi_data
data_mat <- matrix(NA, nrow = 5, ncol = 50)
betas <- list(c(rep(0.45, 25),rep(0.14,25)),
c(rep(0.55, 25),rep(0.11,25)),
c(rep(0.50, 25),rep(0.12,25)),
c(rep(0.52, 10),rep(0.15,40)),
c(rep(0.53, 10),rep(0.13,40)))
inf_times <- list()
for(i in 1:5){
inf_times[[i]] <- sim_epi_data(S0 = 10000, I0 = 10, max_time = 50, beta_vec = betas[[i]], xi_0 = 1/8)
vec <- rep(0,50)
names(vec) <- as.character(1:50)
for(j in 1:50){
if(as.character(j) %in% names(table(floor(inf_times[[i]])))){
vec[j] = table(floor(inf_times[[i]]))[which(names(table(floor(inf_times[[i]]))) == j)]
}
}
data_mat[i,] <- vec
}
out <- clust_cp(data = data_mat, n_iterations = 100, n_burnin = 10,
kernel = "epi",
list(M = 100, B = 1000, L = 1, q = 0.1, gamma = 1/8))
posterior_estimate(out, loss = "binder")
plot(out, loss = "binder")
devtools::load_all(".")
devtools::check(remote = TRUE, manual = TRUE)
devtools::load_all(".")
devtools::check(remote = TRUE, manual = TRUE)
remove.packages("BayesChange")
devtools::load_all(".")
data_mat <- matrix(NA, nrow = 100, ncol = 1)
betas <- c(rep(0.45, 25),rep(0.14,75))
inf_times <- sim_epi_data(10000, 10, 100, betas, 1/8)
inf_times_vec <- rep(0,100)
names(inf_times_vec) <- as.character(1:100)
for(j in 1:100){
if(as.character(j) %in% names(table(floor(inf_times)))){
inf_times_vec[j] = table(floor(inf_times))[which(names(table(floor(inf_times))) == j)]
}
}
data_mat[,1] <- inf_times_vec
out <- detect_cp(data = data_mat, n_iterations = 500, n_burnin = 100,
params = list(M = 250, xi = 1/8, a0 = 40, b0 = 10), kernel = "epi")
print(out)
x <- out
est_cp = posterior_estimate(x, loss = loss, maxNClusters = maxNClusters,
nRuns = nRuns, maxZealousAttempts = maxZealousAttempts)
loss = "binder"
est_cp = posterior_estimate(x, loss = loss, maxNClusters)
loss = "binder"
est_cp = posterior_estimate(x, loss = loss)
cp <- cumsum(table(est_cp))[-length(table(est_cp))]
cp
x <- out
est_cp = posterior_estimate(x, loss = "binder")
est_cp
data_array <- array(data = NA, dim = c(3,100,5))
data_array[1,,1] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[2,,1] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[3,,1] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[1,,2] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[2,,2] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[3,,2] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_array[1,,3] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_array[2,,3] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_array[3,,3] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_array[1,,4] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
data_array[2,,4] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
data_array[3,,4] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
#'
data_array[1,,5] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
data_array[2,,5] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
data_array[3,,5] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
out <- clust_cp(data = data_array, n_iterations = 3000, n_burnin = 1000,
params = list(phi = 0.5, k_0 = 0.25,
nu_0 = 5, S_0 = diag(0.1,3,3),
m_0 = rep(0,3)), B = 1000,  kernel = "ts")
print(out)
x <- out
est_cp = posterior_estimate(x, loss = "binder")
est_cp
.data_plot <- data.frame(Value = numeric(0))
count = 0
for (i in 1:dim(x$data)[3]) {
mat <- x$data[,,i]
for(j in 1:nrow(mat)){
count = count + 1
.data_plot <- rbind(.data_plot, data.frame(Value = as.vector(mat[j,]),
Observation = i,
Cluster = est_cp[i],
Time = 1:ncol(mat),
Count = count))
}
}
.data_plot$Observation <- as.factor(.data_plot$Observation)
.data_plot$Cluster <- as.factor(.data_plot$Cluster)
.data_plot$Count <- as.factor(.data_plot$Count)
ggplot2::ggplot(.data_plot) +
ggplot2::geom_line(ggplot2::aes(x = Time, y = Value, color = Observation, group = Count, linetype = Cluster)) +
ggplot2::xlab("Time") +
ggplot2::ylab("Value") +
ggplot2::scale_colour_brewer(palette = "Set1") +
ggplot2::theme_minimal()
.data_plot
remove.packages("BayesChange")
library(BayesChange)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp(data = data_vec, n_iterations = 2500, n_burnin = 500,
params = list(a = 1, b = 1, c = 0.1), kernel = "ts")
devtools::load_all(".")
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp(data = data_vec, n_iterations = 2500, n_burnin = 500,
params = list(a = 1, b = 1, c = 0.1), kernel = "ts")
print(out)
summary(out)
posterior_estimate(out)
plot(out)
data_mat <- matrix(NA, nrow = 5, ncol = 100)
data_mat[1,] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(50,0,0.125), rnorm(50,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
out <- clust_cp(data = data_mat, n_iterations = 5000, n_burnin = 1000,
L = 1, params = list(phi = 0.5), B = 1000, kernel = "ts")
print(out)
summary(out)
posterior_estimate(out)
plot(out)
out <- clust_cp(data = data_mat, n_iterations = 5000, n_burnin = 1000,
L = 1, params = list(phi = 0.1), B = 1000, kernel = "ts")
print(out)
summary(out)
posterior_estimate(out)
plot(out)
out <- clust_cp(data = data_mat, n_iterations = 5000, n_burnin = 1000,
L = 1, params = list(phi = 0.9), B = 1000, kernel = "ts")
print(out)
summary(out)
posterior_estimate(out)
plot(out)
?detect_cp
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp(data = data_vec, n_iterations = 2500, n_burnin = 500,
params = list(a = 1, b = 1, c = 0.1), kernel = "ts")
print(out)
data_vec <- as.numeric(c(rnorm(50,0,0.1), rnorm(50,1,0.25)))
out <- detect_cp(data = data_vec, n_iterations = 2500, n_burnin = 500,
params = list(a = 1, b = 1, c = 0.1), kernel = "ts")
summary(out)
posterior_estimate(out)
plot(out)
data_mat <- matrix(NA, nrow = 3, ncol = 100)
data_mat[1,] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(50,0,0.125), rnorm(50,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
out <- detect_cp(data = data_mat, n_iterations = 2500, n_burnin = 500,
params = list(m_0 = rep(0,3), k_0 = 0.25, nu_0 = 4,
S_0 = diag(1,3,3)), kernel = "ts")
summary(out)
posterior_estimate(out)
plot(out)
data_mat <- matrix(NA, nrow = 100, ncol = 1)
betas <- c(rep(0.45, 25),rep(0.14,75))
inf_times <- sim_epi_data(10000, 10, 100, betas, 1/8)
inf_times_vec <- rep(0,100)
names(inf_times_vec) <- as.character(1:100)
for(j in 1:100){
if(as.character(j) %in% names(table(floor(inf_times)))){
inf_times_vec[j] = table(floor(inf_times))[which(names(table(floor(inf_times))) == j)]
}
}
data_mat[,1] <- inf_times_vec
out <- detect_cp(data = data_mat, n_iterations = 500, n_burnin = 100,
params = list(M = 250, xi = 1/8, a0 = 40, b0 = 10), kernel = "epi")
summary(out)
posterior_estimate(out)
plot(out)
?clust_cp
data_mat <- matrix(NA, nrow = 5, ncol = 100)
data_mat[1,] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(50,0,0.125), rnorm(50,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
out <- clust_cp(data = data_mat, n_iterations = 5000, n_burnin = 1000,
L = 1, params = list(phi = 0.5), B = 1000, kernel = "ts")
print(out)
summary(out)
posterior_estimate(out)
plot(out)
data_mat <- matrix(NA, nrow = 5, ncol = 100)
data_mat[1,] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(50,0,0.125), rnorm(50,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
out <- clust_cp(data = data_mat, n_iterations = 5000, n_burnin = 1000,
L = 1, params = list(phi = 0.5), B = 1000, kernel = "ts")
print(out)
summary(out)
posterior_estimate(out)
plot(out)
devtools::load_all(".")
data_mat <- matrix(NA, nrow = 5, ncol = 100)
data_mat[1,] <- as.numeric(c(rnorm(50,0,0.100), rnorm(50,1,0.250)))
data_mat[2,] <- as.numeric(c(rnorm(50,0,0.125), rnorm(50,1,0.225)))
data_mat[3,] <- as.numeric(c(rnorm(50,0,0.175), rnorm(50,1,0.280)))
data_mat[4,] <- as.numeric(c(rnorm(25,0,0.135), rnorm(75,1,0.225)))
data_mat[5,] <- as.numeric(c(rnorm(25,0,0.155), rnorm(75,1,0.280)))
out <- clust_cp(data = data_mat, n_iterations = 5000, n_burnin = 1000,
L = 1, params = list(phi = 0.5), B = 1000, kernel = "ts")
print(out)
summary(out)
posterior_estimate(out)
plot(out)
summary(out)
posterior_estimate(out)
plot(out)
usethis::use_version("patch")
