// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sim_epi_data
arma::vec sim_epi_data(double S0, double I0, double max_time, arma::vec beta_vec, double xi_0, unsigned long user_seed);
RcppExport SEXP _BayesChange_sim_epi_data(SEXP S0SEXP, SEXP I0SEXP, SEXP max_timeSEXP, SEXP beta_vecSEXP, SEXP xi_0SEXP, SEXP user_seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< double >::type I0(I0SEXP);
    Rcpp::traits::input_parameter< double >::type max_time(max_timeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_vec(beta_vecSEXP);
    Rcpp::traits::input_parameter< double >::type xi_0(xi_0SEXP);
    Rcpp::traits::input_parameter< unsigned long >::type user_seed(user_seedSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_epi_data(S0, I0, max_time, beta_vec, xi_0, user_seed));
    return rcpp_result_gen;
END_RCPP
}
// detect_cp_uni
Rcpp::List detect_cp_uni(arma::vec data, int n_iterations, double q, double a, double b, double c, double prior_var_phi, double par_theta_c, double par_theta_d, bool print_progress, unsigned long user_seed);
RcppExport SEXP _BayesChange_detect_cp_uni(SEXP dataSEXP, SEXP n_iterationsSEXP, SEXP qSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP prior_var_phiSEXP, SEXP par_theta_cSEXP, SEXP par_theta_dSEXP, SEXP print_progressSEXP, SEXP user_seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_iterations(n_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type prior_var_phi(prior_var_phiSEXP);
    Rcpp::traits::input_parameter< double >::type par_theta_c(par_theta_cSEXP);
    Rcpp::traits::input_parameter< double >::type par_theta_d(par_theta_dSEXP);
    Rcpp::traits::input_parameter< bool >::type print_progress(print_progressSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type user_seed(user_seedSEXP);
    rcpp_result_gen = Rcpp::wrap(detect_cp_uni(data, n_iterations, q, a, b, c, prior_var_phi, par_theta_c, par_theta_d, print_progress, user_seed));
    return rcpp_result_gen;
END_RCPP
}
// detect_cp_multi
Rcpp::List detect_cp_multi(arma::mat data, int n_iterations, double q, double k_0, double nu_0, arma::mat S_0, arma::vec m_0, double par_theta_c, double par_theta_d, double prior_var_phi, bool print_progress, unsigned long user_seed);
RcppExport SEXP _BayesChange_detect_cp_multi(SEXP dataSEXP, SEXP n_iterationsSEXP, SEXP qSEXP, SEXP k_0SEXP, SEXP nu_0SEXP, SEXP S_0SEXP, SEXP m_0SEXP, SEXP par_theta_cSEXP, SEXP par_theta_dSEXP, SEXP prior_var_phiSEXP, SEXP print_progressSEXP, SEXP user_seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_iterations(n_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type k_0(k_0SEXP);
    Rcpp::traits::input_parameter< double >::type nu_0(nu_0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S_0(S_0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m_0(m_0SEXP);
    Rcpp::traits::input_parameter< double >::type par_theta_c(par_theta_cSEXP);
    Rcpp::traits::input_parameter< double >::type par_theta_d(par_theta_dSEXP);
    Rcpp::traits::input_parameter< double >::type prior_var_phi(prior_var_phiSEXP);
    Rcpp::traits::input_parameter< bool >::type print_progress(print_progressSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type user_seed(user_seedSEXP);
    rcpp_result_gen = Rcpp::wrap(detect_cp_multi(data, n_iterations, q, k_0, nu_0, S_0, m_0, par_theta_c, par_theta_d, prior_var_phi, print_progress, user_seed));
    return rcpp_result_gen;
END_RCPP
}
// detect_cp_epi
Rcpp::List detect_cp_epi(arma::mat data, int n_iterations, double q, double M, double xi, double a0, double b0, double I0_var, bool print_progress, unsigned long user_seed);
RcppExport SEXP _BayesChange_detect_cp_epi(SEXP dataSEXP, SEXP n_iterationsSEXP, SEXP qSEXP, SEXP MSEXP, SEXP xiSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP I0_varSEXP, SEXP print_progressSEXP, SEXP user_seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_iterations(n_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type I0_var(I0_varSEXP);
    Rcpp::traits::input_parameter< bool >::type print_progress(print_progressSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type user_seed(user_seedSEXP);
    rcpp_result_gen = Rcpp::wrap(detect_cp_epi(data, n_iterations, q, M, xi, a0, b0, I0_var, print_progress, user_seed));
    return rcpp_result_gen;
END_RCPP
}
// clust_cp_epi
Rcpp::List clust_cp_epi(arma::mat data, int n_iterations, int M, int B, int L, double xi, double alpha_SM, double q, double a0, double b0, double I0_var, double avg_blk, bool print_progress, unsigned long user_seed);
RcppExport SEXP _BayesChange_clust_cp_epi(SEXP dataSEXP, SEXP n_iterationsSEXP, SEXP MSEXP, SEXP BSEXP, SEXP LSEXP, SEXP xiSEXP, SEXP alpha_SMSEXP, SEXP qSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP I0_varSEXP, SEXP avg_blkSEXP, SEXP print_progressSEXP, SEXP user_seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_iterations(n_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_SM(alpha_SMSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type I0_var(I0_varSEXP);
    Rcpp::traits::input_parameter< double >::type avg_blk(avg_blkSEXP);
    Rcpp::traits::input_parameter< bool >::type print_progress(print_progressSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type user_seed(user_seedSEXP);
    rcpp_result_gen = Rcpp::wrap(clust_cp_epi(data, n_iterations, M, B, L, xi, alpha_SM, q, a0, b0, I0_var, avg_blk, print_progress, user_seed));
    return rcpp_result_gen;
END_RCPP
}
// clust_cp_uni
Rcpp::List clust_cp_uni(arma::mat data, int n_iterations, int B, int L, double phi, double a, double b, double c, double q, double alpha_SM, bool print_progress, unsigned long user_seed);
RcppExport SEXP _BayesChange_clust_cp_uni(SEXP dataSEXP, SEXP n_iterationsSEXP, SEXP BSEXP, SEXP LSEXP, SEXP phiSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP qSEXP, SEXP alpha_SMSEXP, SEXP print_progressSEXP, SEXP user_seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_iterations(n_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_SM(alpha_SMSEXP);
    Rcpp::traits::input_parameter< bool >::type print_progress(print_progressSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type user_seed(user_seedSEXP);
    rcpp_result_gen = Rcpp::wrap(clust_cp_uni(data, n_iterations, B, L, phi, a, b, c, q, alpha_SM, print_progress, user_seed));
    return rcpp_result_gen;
END_RCPP
}
// clust_cp_multi
Rcpp::List clust_cp_multi(arma::cube data, int n_iterations, int B, int L, double phi, double k_0, double nu_0, arma::mat S_0, arma::vec m_0, double q, double alpha_SM, bool print_progress, unsigned long user_seed);
RcppExport SEXP _BayesChange_clust_cp_multi(SEXP dataSEXP, SEXP n_iterationsSEXP, SEXP BSEXP, SEXP LSEXP, SEXP phiSEXP, SEXP k_0SEXP, SEXP nu_0SEXP, SEXP S_0SEXP, SEXP m_0SEXP, SEXP qSEXP, SEXP alpha_SMSEXP, SEXP print_progressSEXP, SEXP user_seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_iterations(n_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type k_0(k_0SEXP);
    Rcpp::traits::input_parameter< double >::type nu_0(nu_0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S_0(S_0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m_0(m_0SEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_SM(alpha_SMSEXP);
    Rcpp::traits::input_parameter< bool >::type print_progress(print_progressSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type user_seed(user_seedSEXP);
    rcpp_result_gen = Rcpp::wrap(clust_cp_multi(data, n_iterations, B, L, phi, k_0, nu_0, S_0, m_0, q, alpha_SM, print_progress, user_seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesChange_sim_epi_data", (DL_FUNC) &_BayesChange_sim_epi_data, 6},
    {"_BayesChange_detect_cp_uni", (DL_FUNC) &_BayesChange_detect_cp_uni, 11},
    {"_BayesChange_detect_cp_multi", (DL_FUNC) &_BayesChange_detect_cp_multi, 12},
    {"_BayesChange_detect_cp_epi", (DL_FUNC) &_BayesChange_detect_cp_epi, 10},
    {"_BayesChange_clust_cp_epi", (DL_FUNC) &_BayesChange_clust_cp_epi, 14},
    {"_BayesChange_clust_cp_uni", (DL_FUNC) &_BayesChange_clust_cp_uni, 12},
    {"_BayesChange_clust_cp_multi", (DL_FUNC) &_BayesChange_clust_cp_multi, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesChange(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
